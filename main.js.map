{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["// Для работы с API создайте файл api.js. Все запросы присвойте переменным и экспортируйте их. В других модулях вы сможете импортировать эти функции и вызывать их.\r\n\r\nconst config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-18\",\r\n  headers: {\r\n    authorization: \"813eeaa3-fa56-4801-bdce-a3b4cdeab4d2\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\nconst handleResponse = (res, errorText) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  } else {\r\n    throw new Error(errorText);\r\n  }\r\n};\r\n\r\n// Загрузка информации о пользователе с сервера\r\nexport function getInitialUser() {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers,\r\n  }).then((res) =>\r\n    handleResponse(res, \"Ошибка по загрузке информации о пользователе:\")\r\n  );\r\n}\r\n\r\n// Загрузка карточек с сервера\r\n// Инициализация карточек\r\nexport function getInitialCards() {\r\n  // Код для получения карточек\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers,\r\n  }).then((res) =>\r\n    handleResponse(res, \"Ошибка пo загрузка карточек с сервера:\")\r\n  );\r\n}\r\n\r\n// Редактирование профиля\r\nexport function patchProfileData(userData) {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify(userData),\r\n  }).then((res) => handleResponse(res, \"Ошибка при сохранении данных:\"));\r\n}\r\n\r\n// Обновление аватара\r\nexport function updateAvatar(newAvatar) {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({ avatar: newAvatar }), // Передаем новую ссылку на аватар в теле запроса\r\n  }).then((res) => handleResponse(res, \"Ошибка при обновлении аватара:\"));\r\n}\r\n\r\n// Добавление новой карточки\r\nexport function postAddCards(cardData) {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify(cardData),\r\n  }).then((res) =>\r\n    handleResponse(res, \"Ошибка при добавление новой карточки:\")\r\n  );\r\n}\r\n\r\nexport function updateLikeCount(cardId, isLiked) {\r\n  const method = isLiked ? \"DELETE\" : \"PUT\";\r\n\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method,\r\n    headers: config.headers,\r\n  })\r\n    .then((res) => handleResponse(res, \"Ошибка по обновлениие лайка:\"))\r\n}\r\n\r\nexport function deleteCard(cardId) {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  })\r\n    .then((res) => handleResponse(res, \"Ошибка по удаление карточки:\"))\r\n}\r\n","/*\r\nФункции для работы с карточками проекта Mesto вынесите в файл card.js, из него должна экспортироваться функция createCard, которую вы создали раньше (у вас она может называться по-другому). Функции, обрабатывающие события лайка и удаления карточки, также должны находиться в этом файле и экспортироваться из него.\r\n*/\r\n\r\nimport { updateLikeCount, deleteCard } from \"../scripts/api.js\";\r\n\r\nconst cardTemplate = document.querySelector(\"#card-template\").content; // Получаем шаблон карточки из HTML-документа\r\n\r\n// @todo: Функция создания карточки\r\nexport function createNewCard(\r\n  cardData,\r\n  deleteCardCallback,\r\n  likeCardCallback,\r\n  zoomCardCallback,\r\n  userId\r\n) {\r\n  // Функция для создания новой карточки\r\n  // @todo: Темплейт карточки\r\n  const cardListItem = cardTemplate\r\n    .querySelector(\".places__item\")\r\n    .cloneNode(true); // Клонируем элемент карточки из шаблона\r\n  const cardImage = cardListItem.querySelector(\".card__image\"); // Находим элемент изображения в карточке\r\n  cardImage.src = cardData.link; // Устанавливаем ссылку на изображение\r\n  cardImage.alt = cardData.name; // Устанавливаем альтернативный текст для изображения\r\n  cardListItem.querySelector(\".card__title\").textContent = cardData.name; // Устанавливаем заголовок карточки\r\n  cardImage.addEventListener(\"click\", () =>\r\n    zoomCardCallback(cardData)\r\n  ); /* cardData */\r\n\r\n  const likeButton = cardListItem.querySelector(\".card__like-button\");\r\n  const likeCounter = cardListItem.querySelector(\".counter__like\");\r\n  const deleteButton = cardListItem.querySelector(\".card__delete-button\");\r\n\r\n  const Liked = likeButton.classList.contains(\"card__like-button\");\r\n  const isLiked = likeButton.classList.contains(\"card__like-button_is-active\");\r\n  const likesCount = cardData.likes.length; // Начальное количество лайков\r\n  likeCounter.textContent = likesCount; // Устанавливаем начальное состояние лайка и счетчика\r\n\r\n  if (cardData.likes.some((like) => like._id === userId)) {\r\n    // Карточка лайкнута\r\n    /* likeButton.classList.add(\"card__like-button_is-active\"); */\r\n    likeButton.classList.toggle(\"card__like-button_is-active\", Liked);\r\n  } else {\r\n    // Карточка не лайкнута\r\n    /* likeButton.classList.add(\"card__like-button\"); */\r\n    likeButton.classList.toggle(\"card__like-button\", isLiked);\r\n  }\r\n\r\n /*  if (cardData.likes.some((like) => like._id === userId)) {\r\n    // Карточка лайкнута\r\n    updateLikeCount(cardData._id, isLiked).then((data) => {\r\n      likeButton.classList.add(\"card__like-button_is-active\");\r\n    });\r\n  } else {\r\n    // Карточка не лайкнута\r\n    updateLikeCount(cardData._id, Liked).then((data) => {\r\n      likeButton.classList.add(\"card__like-button\");\r\n    });\r\n  } */\r\n  likeButton.addEventListener(\"click\", () =>\r\n    likeCardCallback(likeButton, likeCounter, cardData._id)\r\n  );\r\n\r\n  // Добавляем обработчик клика на кнопку удаления\r\n  if (cardData.owner._id === userId) {\r\n    deleteButton.addEventListener(\"click\", () => {\r\n      deleteCardCallback(cardData._id, cardListItem);\r\n    });\r\n  } else {\r\n    deleteButton.style.display = \"none\";\r\n  }\r\n  return cardListItem; // Возвращаем созданную карточку\r\n}\r\n\r\nexport const likeCardCallback = (likeButton, likeCounter, cardId) => {\r\n  const isLiked = likeButton.classList.contains(\"card__like-button_is-active\");\r\n  updateLikeCount(cardId, isLiked)\r\n    .then((data) => {\r\n      likeButton.classList.toggle(\"card__like-button_is-active\");\r\n      likeCounter.textContent = data.likes.length;\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Ошибка по обработке лайка:\", error);\r\n    });\r\n};\r\n\r\nexport const deleteCardCallback = (cardId, card) => {\r\n  deleteCard(cardId)\r\n    .then(() => {\r\n      card.remove();\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Ошибка по обработке удаление карточки:\", error);\r\n    });\r\n};\r\n","/*\r\nРаботу модальных окон — в файл modal.js. Оттуда экспортируйте функции openModal и closeModal, принимающие в качестве аргумента DOM-элемент модального окна, с которым нужно произвести действие.\r\n*/\r\n\r\nexport function openModal(modal) {\r\n    modal.classList.add('popup_is-opened');\r\n    document.addEventListener('keydown', closeByEsc);\r\n};\r\n\r\nexport function closeModal(modal) {\r\n    modal.classList.remove('popup_is-opened');\r\n    document.removeEventListener('keydown', closeByEsc);\r\n};\r\n\r\n// Обработчик события для клавиши Esc\r\nexport function closeByEsc(evt) {\r\n    if (evt.key === 'Escape') {\r\n        const openModal = document.querySelector('.popup_is-opened');\r\n        if (openModal) {\r\n            closeModal(openModal);\r\n        }\r\n    }\r\n}\r\n","// А все другие функции, включая декларирование функции enableValidation и валидации форм, — в отдельном файле validation.js.\r\n\r\nconst showInputError = (\r\n  formElement,\r\n  inputElement,\r\n  errorMessage,\r\n  validationConfig\r\n) => {\r\n  // Находим элемент ошибки внутри самой функции\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  // Остальной код такой же\r\n  inputElement.classList.add(validationConfig.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n\r\nconst hideInputError = (formElement, inputElement, validationConfig) => {\r\n  // Находим элемент ошибки\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  // Остальной код такой же\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n// Функция isValid теперь принимает formElement и inputElement,\r\n// а не берёт их из внешней области видимости\r\nconst isValid = (formElement, inputElement, validationConfig) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    // данные атрибута доступны у элемента инпута через ключевое слово dataset.\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    // showInputError теперь получает параметром форму, в которой\r\n    // находится проверяемое поле, и само это поле\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.validationMessage,\r\n      validationConfig\r\n    );\r\n  } else {\r\n    // hideInputError теперь получает параметром форму, в которой\r\n    // находится проверяемое поле, и само это поле\r\n    hideInputError(formElement, inputElement, validationConfig);\r\n  }\r\n\r\n  inputElement.reportValidity();\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  // проходим по этому массиву методом some\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\nconst disableSubmitButton = (buttonElement, validationConfig) => {\r\n  buttonElement.disabled = true;\r\n  buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonElement, validationConfig) => {\r\n  // Если есть хотя бы один невалидный инпут\r\n  if (hasInvalidInput(inputList)) {\r\n    // сделай кнопку неактивной\r\n    disableSubmitButton(buttonElement, validationConfig);\r\n  } else {\r\n    // иначе сделай кнопку активной\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  // Найдём все поля формы и сделаем из них массив\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  // Найдём в текущей форме кнопку отправки\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n  // Обойдём все элементы полученной коллекции\r\n  inputList.forEach((inputElement) => {\r\n    // каждому полю добавим обработчик события input\r\n    inputElement.addEventListener(\"input\", () => {\r\n      // Внутри колбэка вызовем isValid,\r\n      // передав ей форму и проверяемый элемент\r\n      isValid(formElement, inputElement, validationConfig);\r\n      // Вызовем toggleButtonState и передадим ей массив полей и кнопку\r\n      toggleButtonState(inputList, buttonElement, validationConfig);\r\n    });\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, validationConfig);\r\n};\r\n\r\nexport const clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, validationConfig);\r\n    inputElement.value = \"\";\r\n  });\r\n\r\n  disableSubmitButton(buttonElement, validationConfig);\r\n};\r\n\r\nexport const enableValidation = (validationConfig) => {\r\n  // Найдём все формы с указанным классом в DOM,\r\n  // сделаем из них массив методом Array.from\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n  // Переберём полученную коллекцию\r\n  formList.forEach((formElement) => {\r\n    // Для каждой формы вызовем функцию setEventListeners,\r\n    // передав ей элемент формы\r\n    setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n","/* В файле index.js должны остаться:\r\n1. объявления и инициализация глобальных констант и переменных с DOM-элементами страницы,\r\n2. обработчики событий (при открытии и закрытии попапов; при отправке форм; обработчик, открывающий попап при клике по изображению карточки);\r\n3. вызовы других функций, подключённых из созданных модулей, которым нужно будет передавать объявленные здесь переменные и обработчики.\r\n*/\r\n\r\nimport \"../pages/index.css\"; // добавьте импорт главного файла стилей\r\nimport {\r\n  createNewCard,\r\n  deleteCardCallback,\r\n  likeCardCallback,\r\n} from \"../components/card.js\";\r\nimport { openModal, closeModal } from \"../components/modal.js\";\r\nimport { enableValidation, clearValidation } from \"./validation.js\";\r\nimport {\r\n  getInitialCards,\r\n  getInitialUser,\r\n  patchProfileData,\r\n  postAddCards,\r\n  updateAvatar,\r\n} from \"./api.js\";\r\n\r\n// @todo: DOM узлы\r\nconst cardList = document.querySelector(\".places__list\"); // Получаем список, в который будем добавлять карточки\r\nconst editButton = document.querySelector(\".profile__edit-button\");\r\nconst addButton = document.querySelector(\".profile__add-button\");\r\nconst addButtonAvatar = document.querySelector(\".profile__image-block\");\r\nconst modalEditProfile = document.querySelector(\".popup_type_edit\");\r\nconst modalNewCard = document.querySelector(\".popup_type_new-card\");\r\nconst modalNewAvatar = document.querySelector(\".popup_type_new-avatar\");\r\nconst closePopup = document.querySelectorAll(\".popup__close\");\r\nconst overlayContent = document.querySelectorAll(\".popup\");\r\n// Находим форму в DOM\r\nconst formEditProfile = document.querySelector('form[name=\"edit-profile\"]'); // Воспользуйтесь методом querySelector()\r\n// Находим поля формы в DOM\r\nconst nameInput = formEditProfile.querySelector('input[name=\"name\"]'); // Воспользуйтесь инструментом .querySelector()\r\nconst jobInput = formEditProfile.querySelector('input[name=\"description\"]'); // Воспользуйтесь инструментом .querySelector()\r\nconst nameProfile = document.querySelector(\".profile__title\");\r\nconst jobProfile = document.querySelector(\".profile__description\");\r\n// Выберите элементы, куда должны быть вставлены значения полей\r\nconst nameInputProfile = document.querySelector(\".popup__input_type_name\");\r\nconst jobInputProfile = document.querySelector(\r\n  \".popup__input_type_description\"\r\n);\r\n// Обработчик к форме\r\nconst formElementCard = document.querySelector('form[name=\"new-place\"]');\r\nconst formElementAvatar = document.querySelector('form[name=\"new-avatar\"]');\r\nconst imgModal = document.querySelector(\".popup_type_image\");\r\nconst ImgModalUrl = imgModal.querySelector(\".popup__image\");\r\nconst ImgModalTitle = imgModal.querySelector(\".popup__caption\");\r\n// Получаем значения полей форми\r\nconst nameInputCard = document.querySelector('input[name=\"place-name\"]');\r\nconst linkInputCard = document.querySelector('input[name=\"link\"]');\r\nconst linkInputAvatar = document.querySelector('input[name=\"link-avatar\"]');\r\n\r\nconst profileImage = document.querySelector(\".profile__image\");\r\nconst profileTitle = document.querySelector(\".profile__title\");\r\nconst profileDescription = document.querySelector(\".profile__description\");\r\n\r\n// Обработчик события для overlay\r\nexport function closeOverlay(evt) {\r\n  if (evt.target.classList.contains(\"popup\")) {\r\n    closeModal(evt.target);\r\n  }\r\n}\r\n\r\n// Функция для копирования значений полей профилья\r\nfunction copyProfileValue() {\r\n  nameInput.value = nameProfile.textContent;\r\n  jobInput.value = jobProfile.textContent;\r\n  openModal(formEditProfile.closest(\".popup\"));\r\n  clearValidation(profileForm, validationConfig);\r\n}\r\n\r\n// Обработчик «отправки» формы для редактирование профиля\r\nfunction handleFormSubmitProfile(evt) {\r\n  evt.preventDefault(); // Предотвращаем отправку формы по умолчанию\r\n\r\n  // Получение значений из полей формы\r\n  const nameValue = nameInput.value;\r\n  const aboutValue = jobInput.value;\r\n\r\n  // Создание объекта с обновленными данными\r\n  const updatedProfileData = {\r\n    name: nameValue,\r\n    about: aboutValue,\r\n    // Другие свойства, если необходимо\r\n  };\r\n  showLoadingSaveText(); // Показываем текст загрузки\r\n  patchProfileData(updatedProfileData)\r\n    .then((userData) => {\r\n      // После успешной загрузки:\r\n\r\n      hideLoadingSaveText(); // Скрываем текст загрузки\r\n      closeModal(formEditProfile.closest(\".popup\")); // Закрываем\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при сохранении данные профиля:\", err);\r\n    })\r\n    .finally(() => {\r\n      hideLoadingSaveText(); // Скрываем текст загрузки\r\n    });\r\n}\r\n\r\n// Функция обновление аватара\r\nfunction handleFormSubmitAvatar(evt) {\r\n  evt.preventDefault(); // Отменяем стандартную отправку форми\r\n  // Получаем значения полей форми\r\n  const linkValueAvatar = linkInputAvatar.value;\r\n  showLoadingSaveText(); // Показываем текст загрузки\r\n  updateAvatar(linkValueAvatar)\r\n    .then(() => {\r\n      // После успешной загрузки:\r\n      hideLoadingSaveText(); // Скрываем текст загрузки\r\n      closeModal(evt.target.closest(\".popup\")); // Закрываем модальное окно\r\n      evt.target.reset(); // Сбрасываем значения формы\r\n      clearValidation(profileForm, validationConfig);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при обновлении аватара:\", err);\r\n    })\r\n    .finally(() => {\r\n      hideLoadingSaveText(); // Скрываем текст загрузки\r\n    });\r\n}\r\n\r\n// Функция добавления карточки\r\nfunction handleFormSubmitCard(evt) {\r\n  evt.preventDefault(); // Отменяем стандартную отправку форми\r\n  // Получаем значения полей форми\r\n  const nameValueCard = nameInputCard.value;\r\n  const linkValueCard = linkInputCard.value;\r\n  // Создаем объект\r\n  const newItemCard = {\r\n    name: nameValueCard,\r\n    link: linkValueCard,\r\n  };\r\n  showLoadingSaveText(); // Показываем текст загрузки\r\n  postAddCards(newItemCard)\r\n    .then((cardData) => {\r\n      // После успешной загрузки:\r\n      // Создаем новую карточки\r\n      const newCard = createNewCard(\r\n        cardData,\r\n        deleteCardCallback,\r\n        likeCardCallback,\r\n        zoomCardCallback,\r\n        userId\r\n      );\r\n      // Добавляем карточку в начало\r\n      cardList.prepend(newCard);\r\n      hideLoadingSaveText(); // Скрываем текст загрузки\r\n      // Закрываем модальное окно\r\n      closeModal(evt.target.closest(\".popup\"));\r\n      evt.target.reset();\r\n      // Очистка ошибок валидации при открытии формы профиля\r\n      clearValidation(profileForm, validationConfig);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка по добавление карточки:\", err);\r\n    })\r\n    .finally(() => {\r\n      hideLoadingSaveText(); // Скрываем текст загрузки\r\n    });\r\n}\r\n\r\n// Функция для класса анимации\r\nfunction addAnimationPopup() {\r\n  const popups = document.querySelectorAll(\".popup\");\r\n  popups.forEach((popup) => {\r\n    popup.classList.add(\"popup_is-animated\");\r\n  });\r\n}\r\n\r\n// Функция клик по изображению\r\nexport const zoomCardCallback = (element) => {\r\n  ImgModalUrl.src = element.link;\r\n  ImgModalUrl.alt = element.name;\r\n  ImgModalTitle.textContent = element.name;\r\n  openModal(imgModal);\r\n};\r\n\r\nfunction showLoadingSaveText() {\r\n  const openModal = document.querySelector(\".popup_is-opened\");\r\n  if (openModal) {\r\n    const saveButton = openModal.querySelector(\".popup__button\");\r\n    saveButton.textContent = \"Сохранить...\";\r\n  }\r\n}\r\n\r\nfunction hideLoadingSaveText() {\r\n  const openModal = document.querySelector(\".popup_is-opened\");\r\n  if (openModal) {\r\n    const saveButton = openModal.querySelector(\".popup__button\");\r\n    saveButton.textContent = \"Сохранить\";\r\n  }\r\n}\r\n\r\nformElementCard.addEventListener(\"submit\", handleFormSubmitCard);\r\neditButton.addEventListener(\"click\", () => openModal(modalEditProfile));\r\naddButton.addEventListener(\"click\", () => openModal(modalNewCard));\r\nformElementAvatar.addEventListener(\"submit\", handleFormSubmitAvatar);\r\naddButtonAvatar.addEventListener(\"click\", () => openModal(modalNewAvatar));\r\n\r\n// Прикрепляем обработчик к форме:\r\n// он будет следить за событием “submit” - «отправка»\r\nformEditProfile.addEventListener(\"submit\", handleFormSubmitProfile);\r\n// Вызов функцию анимации\r\ndocument.addEventListener(\"DOMContentLoaded\", addAnimationPopup);\r\n// Вызов функцию закрытие по Overlay\r\noverlayContent.forEach((evt) => {\r\n  evt.addEventListener(\"click\", closeOverlay);\r\n});\r\n// Находим и закрываем открытое модальное окно\r\nclosePopup.forEach((button) =>\r\n  button.addEventListener(\"click\", () => {\r\n    const openModal = document.querySelector(\".popup_is-opened\");\r\n    if (openModal) {\r\n      closeModal(openModal);\r\n    }\r\n  })\r\n);\r\n\r\n// @todo: Вывести карточки на страницу\r\n// Вывод карточек на страницу\r\nexport let userId = null;\r\n\r\nPromise.all([getInitialCards(), getInitialUser()])\r\n  .then(([cardData, userData]) => {\r\n    userId = userData._id;\r\n\r\n    cardData.forEach(function (item) {\r\n      const newCard = createNewCard(\r\n        item,\r\n        deleteCardCallback,\r\n        likeCardCallback,\r\n        zoomCardCallback,\r\n        userId\r\n      );\r\n      cardList.append(newCard);\r\n    });\r\n\r\n    profileTitle.textContent = userData.name;\r\n    profileDescription.textContent = userData.about;\r\n    profileImage.src = userData.avatar;\r\n  })\r\n  .catch((err) => {\r\n    console.log(\"Ошибка: \", err);\r\n  });\r\n\r\n// вызов функций enableValidation и clearValidation должен находиться в файле index.js\r\n// включение валидации вызовом enableValidation\r\n// все настройки передаются при вызове\r\n\r\nexport const validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\n// Вызовем функцию\r\nenableValidation(validationConfig);\r\n\r\nconst profileForm = document.querySelector('.popup__form[name=\"edit-profile\"]');\r\n"],"names":["config","baseUrl","headers","authorization","handleResponse","res","errorText","ok","json","Error","cardTemplate","document","querySelector","content","createNewCard","cardData","deleteCardCallback","likeCardCallback","zoomCardCallback","userId","cardListItem","cloneNode","cardImage","src","link","alt","name","textContent","addEventListener","likeButton","likeCounter","deleteButton","Liked","classList","contains","isLiked","likesCount","likes","length","some","like","_id","toggle","owner","style","display","cardId","method","fetch","concat","then","updateLikeCount","data","catch","error","console","card","deleteCard","remove","openModal","modal","add","closeByEsc","closeModal","removeEventListener","evt","key","hideInputError","formElement","inputElement","validationConfig","errorElement","id","inputErrorClass","errorClass","disableSubmitButton","buttonElement","disabled","inactiveButtonClass","toggleButtonState","inputList","validity","valid","hasInvalidInput","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","value","cardList","editButton","addButton","addButtonAvatar","modalEditProfile","modalNewCard","modalNewAvatar","closePopup","overlayContent","formEditProfile","nameInput","jobInput","formElementCard","formElementAvatar","imgModal","ImgModalUrl","ImgModalTitle","nameInputCard","linkInputCard","linkInputAvatar","profileImage","profileTitle","profileDescription","closeOverlay","target","element","showLoadingSaveText","hideLoadingSaveText","preventDefault","newItemCard","body","JSON","stringify","newCard","prepend","closest","reset","profileForm","err","finally","newAvatar","linkValueAvatar","avatar","userData","updatedProfileData","about","popup","button","Promise","all","_ref","_ref2","item","append","log","formSelector","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","reportValidity","isValid","setEventListeners","enableValidation"],"sourceRoot":""}