{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/webpack/runtime/define property getters","webpack://mesto-project-ff/webpack/runtime/hasOwnProperty shorthand","webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// Для работы с API создайте файл api.js. Все запросы присвойте переменным и экспортируйте их. В других модулях вы сможете импортировать эти функции и вызывать их.\r\nconst profileImage = document.querySelector(\".profile__image\");\r\nconst saveText = document.querySelector(\".popup__button\");\r\nexport const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-18\",\r\n  headers: {\r\n    authorization: \"813eeaa3-fa56-4801-bdce-a3b4cdeab4d2\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\n// Загрузка информации о пользователе с сервера\r\nexport function getInitialUser() {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers,\r\n  }).then((res) => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n\r\n    // если ошибка, отклоняем промис\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  });\r\n}\r\n\r\n// Загрузка карточек с сервера\r\n// Инициализация карточек\r\nexport function getInitialCards() {\r\n  // Код для получения карточек\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers,\r\n  }).then((res) => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n\r\n    // если ошибка, отклоняем промис\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  });\r\n}\r\n\r\n// Редактирование профиля\r\nexport function patchProfileData(arrayInfo) {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify(arrayInfo),\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(\"Ошибка при сохранении данных\");\r\n      }\r\n      // Возвращаем что-то, если нужно\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Ошибка при сохранении данных:\", error);\r\n      // Обработка ошибок (если необходимо)\r\n      throw error; // Прокидываем ошибку дальше\r\n    });\r\n}\r\n\r\nexport function showLoadingSaveText() {\r\n  saveText.textContent = \"Сохранить...\";\r\n}\r\n\r\nexport function hideLoadingSaveText() {\r\n  saveText.textContent = \"Сохранить\";\r\n}\r\n\r\n// Обновление аватара\r\nexport function updateAvatar(newAvatar) {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({ avatar: newAvatar }), // Передаем новую ссылку на аватар в теле запроса\r\n  })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        profileImage.style.backgroundImage = `url('${newAvatar}')`;\r\n        return res.json();\r\n      } else {\r\n        console.error(\"Ошибка при обновлении аватара:\", res.status);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Ошибка при выполнении запроса:\", error);\r\n    });\r\n}\r\n\r\n// Добавление новой карточки\r\nexport function postAddCards(arrayInfo) {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify(arrayInfo),\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(\"Ошибка при добавление новой карточки\");\r\n      }\r\n      // Возвращаем что-то, если нужно\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Ошибка по добавление карточки:\", error);\r\n      // Обработка ошибок (если необходимо)\r\n      throw error; // Прокидываем ошибку дальше\r\n    });\r\n}\r\n\r\nexport function updateLikeCount(cardId, isLiked) {\r\n  const method = isLiked ? \"DELETE\" : \"PUT\";\r\n\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method,\r\n    headers: config.headers,\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(\"Ошибка по обновлениие лайка\");\r\n      }\r\n      return response.json();\r\n    })\r\n\r\n    .catch((error) => {\r\n      console.error(\"Ошибка по обработке лайка:\", error);\r\n    });\r\n}\r\n\r\nexport function deleteCard(cardId) {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(\"Ошибка по удаление карточки\");\r\n      }\r\n      // Успешное удаление карточки\r\n      console.log(\"Карточка успешно удалена\");\r\n      // Возвращаем что-то, если нужно\r\n      return response.json();\r\n    })\r\n\r\n    .catch((error) => {\r\n      console.error(\"Ошибка по обработке удаление карточки:\", error);\r\n    });\r\n}\r\n","/*\r\nФункции для работы с карточками проекта Mesto вынесите в файл card.js, из него должна экспортироваться функция createCard, которую вы создали раньше (у вас она может называться по-другому). Функции, обрабатывающие события лайка и удаления карточки, также должны находиться в этом файле и экспортироваться из него.\r\n*/\r\nimport { zoomImgModal, cardsData, cardId, userId, likesCount } from \"../scripts/index.js\";\r\nimport { updateLikeCount, deleteCard } from \"../scripts/api.js\";\r\n\r\nconst cardTemplate = document.querySelector(\"#card-template\").content; // Получаем шаблон карточки из HTML-документа\r\n\r\n// @todo: Функция создания карточки\r\nexport function addNewCard(item, deleteCard, cardsData, cardId, userId) {\r\n  // Функция для создания новой карточки\r\n  // @todo: Темплейт карточки\r\n\r\n  const cardListItem = cardTemplate\r\n    .querySelector(\".places__item\")\r\n    .cloneNode(true); // Клонируем элемент карточки из шаблона\r\n  const cardImage = cardListItem.querySelector(\".card__image\"); // Находим элемент изображения в карточке\r\n  cardImage.src = item.link; // Устанавливаем ссылку на изображение\r\n  cardImage.alt = item.name; // Устанавливаем альтернативный текст для изображения\r\n  cardListItem.querySelector(\".card__title\").textContent = item.name; // Устанавливаем заголовок карточки\r\n\r\n  cardImage.addEventListener(\"click\", function () {\r\n    zoomImgModal(item);\r\n  });\r\n\r\n  const likeButton = cardListItem.querySelector(\".card__like-button\");\r\n  const likeCounter = cardListItem.querySelector(\".counter__like\");\r\n\r\n  // Предположим, у нас есть переменная, хранящая информацию о текущем состоянии лайка\r\n  let isLiked = false;\r\n  let likesCount = item.likes.length; // Начальное количество лайков\r\n\r\n  // Обработчик лайка\r\n  likeButton.addEventListener(\"click\", () => {\r\n    updateLikeCount(item._id, isLiked, likesCount).then((data) => {\r\n      isLiked = !isLiked;\r\n      likesCount = data.likes.length;\r\n      likeButton.classList.toggle(\"card__like-button_is-active\", isLiked);\r\n      likeCounter.textContent = likesCount;\r\n    });\r\n  });\r\n\r\n  // Устанавливаем начальное состояние лайка и счетчика\r\n  likeButton.classList.toggle(\"card__like-button_is-active\", isLiked);\r\n  likeCounter.textContent = likesCount;\r\n\r\n  return cardListItem; // Возвращаем созданную карточку\r\n}\r\n","/*\r\nРаботу модальных окон — в файл modal.js. Оттуда экспортируйте функции openModal и closeModal, принимающие в качестве аргумента DOM-элемент модального окна, с которым нужно произвести действие.\r\n*/\r\n\r\nexport function openModal(modal) {\r\n    modal.classList.add('popup_is-opened');\r\n    document.addEventListener('keydown', closeByEsc);\r\n};\r\n\r\nexport function closeModal(modal) {\r\n    modal.classList.remove('popup_is-opened');\r\n    document.removeEventListener('keydown', closeByEsc);\r\n};\r\n\r\n// Обработчик события для клавиши Esc\r\nexport function closeByEsc(evt) {\r\n    if (evt.key === 'Escape') {\r\n        const openModal = document.querySelector('.popup_is-opened');\r\n        if (openModal) {\r\n            closeModal(openModal);\r\n        }\r\n    }\r\n}\r\n","\r\n// А все другие функции, включая декларирование функции enableValidation и валидации форм, — в отдельном файле validation.js.\r\n\r\nconst showInputError = (formElement, inputElement, errorMessage, validationConfig) => {\r\n   // Находим элемент ошибки внутри самой функции\r\n   const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n   // Остальной код такой же\r\n  inputElement.classList.add(validationConfig.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n\r\nconst hideInputError = (formElement, inputElement, validationConfig) => {\r\n  // Находим элемент ошибки\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  // Остальной код такой же\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = '';\r\n};\r\n\r\n// Функция isValid теперь принимает formElement и inputElement,\r\n// а не берёт их из внешней области видимости\r\nconst isValid = (formElement, inputElement, validationConfig) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    // данные атрибута доступны у элемента инпута через ключевое слово dataset.\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    // showInputError теперь получает параметром форму, в которой\r\n    // находится проверяемое поле, и само это поле\r\n    showInputError(formElement, inputElement, inputElement.validationMessage, validationConfig);\r\n  } else {\r\n    // hideInputError теперь получает параметром форму, в которой\r\n    // находится проверяемое поле, и само это поле\r\n    hideInputError(formElement, inputElement, validationConfig);\r\n  }\r\n\r\n  inputElement.reportValidity();\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  // проходим по этому массиву методом some\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonElement, validationConfig) => {\r\n  // Если есть хотя бы один невалидный инпут\r\n  if (hasInvalidInput(inputList)) {\r\n    // сделай кнопку неактивной\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  } else {\r\n    // иначе сделай кнопку активной\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n // Найдём все поля формы и сделаем из них массив\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  // Найдём в текущей форме кнопку отправки\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n// Обойдём все элементы полученной коллекции\r\n  inputList.forEach((inputElement) => {\r\n    // каждому полю добавим обработчик события input\r\n    inputElement.addEventListener('input', () => {\r\n      // Внутри колбэка вызовем isValid,\r\n      // передав ей форму и проверяемый элемент\r\n      isValid(formElement, inputElement, validationConfig);\r\n       // Вызовем toggleButtonState и передадим ей массив полей и кнопку\r\n      toggleButtonState(inputList, buttonElement, validationConfig);\r\n    });\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, validationConfig);\r\n};\r\n\r\nexport const clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, validationConfig);\r\n    inputElement.value = '';\r\n  });\r\n\r\n  buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  buttonElement.disabled = true;\r\n};\r\n\r\nexport const enableValidation = (validationConfig) => {\r\n  // Найдём все формы с указанным классом в DOM,\r\n  // сделаем из них массив методом Array.from\r\n  const formList = Array.from(document.querySelectorAll(validationConfig.formSelector));\r\n// Переберём полученную коллекцию\r\n  formList.forEach((formElement) => {\r\n     // Для каждой формы вызовем функцию setEventListeners,\r\n    // передав ей элемент формы\r\n    setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n\r\n","/* В файле index.js должны остаться:\r\n1. объявления и инициализация глобальных констант и переменных с DOM-элементами страницы,\r\n2. обработчики событий (при открытии и закрытии попапов; при отправке форм; обработчик, открывающий попап при клике по изображению карточки);\r\n3. вызовы других функций, подключённых из созданных модулей, которым нужно будет передавать объявленные здесь переменные и обработчики.\r\n*/\r\n\r\nimport \"../pages/index.css\"; // добавьте импорт главного файла стилей\r\nimport { addNewCard } from \"../components/card.js\";\r\nimport { openModal, closeModal } from \"../components/modal.js\";\r\nimport { enableValidation, clearValidation } from \"./validation.js\";\r\nimport {\r\n  getInitialCards,\r\n  getInitialUser,\r\n  patchProfileData,\r\n  postAddCards,\r\n  updateAvatar,\r\n  deleteCard,\r\n  hideLoadingSaveText,\r\n  showLoadingSaveText,\r\n} from \"./api.js\";\r\n\r\n// @todo: DOM узлы\r\nconst cardList = document.querySelector(\".places__list\"); // Получаем список, в который будем добавлять карточки\r\nconst editButton = document.querySelector(\".profile__edit-button\");\r\nconst addButton = document.querySelector(\".profile__add-button\");\r\nconst addButtonAvatar = document.querySelector(\".profile__image-block\");\r\nconst modalEditProfile = document.querySelector(\".popup_type_edit\");\r\nconst modalNewCard = document.querySelector(\".popup_type_new-card\");\r\nconst modalNewAvatar = document.querySelector(\".popup_type_new-avatar\");\r\nconst closePopup = document.querySelectorAll(\".popup__close\");\r\nconst overlayContent = document.querySelectorAll(\".popup\");\r\n// Находим форму в DOM\r\nconst formEditProfile = document.querySelector('form[name=\"edit-profile\"]'); // Воспользуйтесь методом querySelector()\r\n// Находим поля формы в DOM\r\nconst nameInput = formEditProfile.querySelector('input[name=\"name\"]'); // Воспользуйтесь инструментом .querySelector()\r\nconst jobInput = formEditProfile.querySelector('input[name=\"description\"]'); // Воспользуйтесь инструментом .querySelector()\r\nconst nameProfile = document.querySelector(\".profile__title\");\r\nconst jobProfile = document.querySelector(\".profile__description\");\r\n// Выберите элементы, куда должны быть вставлены значения полей\r\nconst nameInputProfile = document.querySelector(\".popup__input_type_name\");\r\nconst jobInputProfile = document.querySelector(\r\n  \".popup__input_type_description\"\r\n);\r\n// Обработчик к форме\r\nconst formElementCard = document.querySelector('form[name=\"new-place\"]');\r\nconst formElementAvatar = document.querySelector('form[name=\"new-avatar\"]');\r\nconst imgModal = document.querySelector(\".popup_type_image\");\r\nconst ImgModalUrl = imgModal.querySelector(\".popup__image\");\r\nconst ImgModalTitle = imgModal.querySelector(\".popup__caption\");\r\n// Получаем значения полей форми\r\nconst nameInputCard = document.querySelector('input[name=\"place-name\"]');\r\nconst linkInputCard = document.querySelector('input[name=\"link\"]');\r\nconst linkInputAvatar = document.querySelector('input[name=\"link-avatar\"]');\r\n\r\nconst profileImage = document.querySelector(\".profile__image\");\r\nconst profileTitle = document.querySelector(\".profile__title\");\r\nconst profileDescription = document.querySelector(\".profile__description\");\r\n\r\n// Обработчик события для overlay\r\nexport function closeOverlay(evt) {\r\n  if (evt.target.classList.contains(\"popup\")) {\r\n    closeModal(evt.target);\r\n  }\r\n}\r\n\r\n// Функция для копирования значений полей профилья\r\nfunction copyProfileValue() {\r\n  nameInput.value = nameProfile.textContent;\r\n  jobInput.value = jobProfile.textContent;\r\n  openModal(formEditProfile.closest(\".popup\"));\r\n}\r\n\r\n// Обработчик «отправки» формы для редактирование профиля\r\nfunction handleFormSubmitProfile(evt) {\r\n  evt.preventDefault(); // Предотвращаем отправку формы по умолчанию\r\n\r\n  // Получение значений из полей формы\r\n  const nameValue = nameInput.value;\r\n  const aboutValue = jobInput.value;\r\n\r\n  // Создание объекта с обновленными данными\r\n  const updatedProfileData = {\r\n    name: nameValue,\r\n    about: aboutValue,\r\n    // Другие свойства, если необходимо\r\n  };\r\n  showLoadingSaveText(); // Показываем текст загрузки\r\n  patchProfileData(updatedProfileData)\r\n    .then(() => {\r\n      // После успешной загрузки:\r\n      hideLoadingSaveText(); // Скрываем текст загрузки\r\n      closeModal(formEditProfile.closest(\".popup\")); // Закрываем\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при сохранении данные профиля:\", err);\r\n      showLoadingSaveText(); // Показываем текст загрузки\r\n    });\r\n}\r\n\r\n// Функция обновление аватара\r\nfunction handleFormSubmitAvatar(evt) {\r\n  evt.preventDefault(); // Отменяем стандартную отправку форми\r\n  // Получаем значения полей форми\r\n  const linkValueAvatar = linkInputAvatar.value;\r\n  showLoadingSaveText(); // Показываем текст загрузки\r\n  updateAvatar(linkValueAvatar)\r\n    .then(() => {\r\n      // После успешной загрузки:\r\n      hideLoadingSaveText(); // Скрываем текст загрузки\r\n      closeModal(evt.target.closest(\".popup\")); // Закрываем модальное окно\r\n      evt.target.reset(); // Сбрасываем значения формы\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при обновлении аватара:\", err);\r\n      showLoadingSaveText(); // Показываем текст загрузки\r\n    });\r\n}\r\n\r\n// Функция добавления карточки\r\nfunction handleFormSubmitCard(evt) {\r\n  evt.preventDefault(); // Отменяем стандартную отправку форми\r\n  // Получаем значения полей форми\r\n  const nameValueCard = nameInputCard.value;\r\n  const linkValueCard = linkInputCard.value;\r\n  // Создаем объект\r\n  const newItemCard = {\r\n    name: nameValueCard,\r\n    link: linkValueCard,\r\n    likes: [],\r\n  };\r\n  showLoadingSaveText(); // Показываем текст загрузки\r\n  postAddCards(newItemCard)\r\n    .then(() => {\r\n      // После успешной загрузки:\r\n      hideLoadingSaveText(); // Скрываем текст загрузки\r\n      // Закрываем модальное окно\r\n      closeModal(evt.target.closest(\".popup\"));\r\n      evt.target.reset();\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка по добавление карточки:\", err);\r\n      showLoadingSaveText(); // Показываем текст загрузки\r\n    });\r\n\r\n  // Создаем новую карточки\r\n  const newCard = addNewCard(\r\n    newItemCard,\r\n    deleteCard,\r\n    cardIds,\r\n    cardsData,\r\n    cardId,\r\n    userId,\r\n    likesCount\r\n  );\r\n  // Добавляем карточку в начало\r\n  cardList.prepend(newCard);\r\n}\r\n\r\n// Функция для класса анимации\r\nfunction addAnimationPopup() {\r\n  const popups = document.querySelectorAll(\".popup\");\r\n  popups.forEach((popup) => {\r\n    popup.classList.add(\"popup_is-animated\");\r\n  });\r\n}\r\n\r\n// Функция клик по изображению\r\nexport function zoomImgModal(element) {\r\n  ImgModalUrl.src = element.link;\r\n  ImgModalUrl.alt = element.name;\r\n  ImgModalTitle.textContent = element.name;\r\n  openModal(imgModal);\r\n}\r\n\r\nformElementCard.addEventListener(\"submit\", handleFormSubmitCard);\r\neditButton.addEventListener(\"click\", () => openModal(modalEditProfile));\r\naddButton.addEventListener(\"click\", () => openModal(modalNewCard));\r\nformElementAvatar.addEventListener(\"submit\", handleFormSubmitAvatar);\r\naddButtonAvatar.addEventListener(\"click\", () => openModal(modalNewAvatar));\r\n\r\n// Вызов функции копирования значений при открытии модального окна\r\neditButton.addEventListener(\"click\", copyProfileValue);\r\n// Прикрепляем обработчик к форме:\r\n// он будет следить за событием “submit” - «отправка»\r\nformEditProfile.addEventListener(\"submit\", handleFormSubmitProfile);\r\n// Вызов функцию анимации\r\ndocument.addEventListener(\"DOMContentLoaded\", addAnimationPopup);\r\n// Вызов функцию закрытие по Overlay\r\noverlayContent.forEach((evt) => {\r\n  evt.addEventListener(\"click\", closeOverlay);\r\n});\r\n// Находим и закрываем открытое модальное окно\r\nclosePopup.forEach((button) =>\r\n  button.addEventListener(\"click\", () => {\r\n    const openModal = document.querySelector(\".popup_is-opened\");\r\n    if (openModal) {\r\n      closeModal(openModal);\r\n    }\r\n  })\r\n);\r\n\r\n// @todo: Вывести карточки на страницу\r\n// Вывод карточек на страницу\r\nexport let userId = null;\r\nexport let cardIds = [];\r\nexport let cardId = [];\r\nexport let cardsData = [];\r\nexport let likesCount = cardsData.likes;\r\n\r\nPromise.all([getInitialCards(), getInitialUser()])\r\n  .then(([cardsData, userData]) => {\r\n    userId = userData._id;\r\n    cardIds = cardsData._id;\r\n    cardId = cardsData._id;\r\n\r\n    cardsData.forEach(function (item) {\r\n      const newCard = addNewCard(\r\n        item,\r\n        deleteCard,\r\n        cardIds,\r\n        cardsData,\r\n        cardId,\r\n        userId,\r\n        likesCount\r\n      );\r\n\r\n      // Добавляем обработчик клика на кнопку удаления\r\n      const deleteButton = newCard.querySelector(\".card__delete-button\");\r\n      if (item.owner._id === userId) {\r\n        deleteButton.addEventListener(\"click\", () => {\r\n          deleteCard(item._id).then(() => {\r\n            // Удаляем карточку из интерфейса\r\n            newCard.remove();\r\n          });\r\n        });\r\n      } else {\r\n        deleteButton.style.display = \"none\";\r\n      }\r\n      cardList.append(newCard);\r\n    });\r\n\r\n    profileTitle.textContent = userData.name;\r\n    profileDescription.textContent = userData.about;\r\n    profileImage.src = userData.avatar;\r\n  })\r\n  .catch((err) => {\r\n    console.log(\"Ошибка: \", err);\r\n  });\r\n\r\n// вызов функций enableValidation и clearValidation должен находиться в файле index.js\r\n\r\n// включение валидации вызовом enableValidation\r\n// все настройки передаются при вызове\r\n\r\nexport const validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\n// Вызовем функцию\r\nenableValidation(validationConfig);\r\n\r\nconst profileForm = document.querySelector('.popup__form[name=\"edit-profile\"]');\r\n\r\n// Очистка ошибок валидации при открытии формы профиля\r\nclearValidation(profileForm, validationConfig);\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","profileImage","document","querySelector","saveText","config","baseUrl","headers","authorization","showLoadingSaveText","textContent","hideLoadingSaveText","cardTemplate","content","addNewCard","item","deleteCard","cardsData","cardId","userId","cardListItem","cloneNode","cardImage","src","link","alt","name","addEventListener","zoomImgModal","likeButton","likeCounter","isLiked","likesCount","likes","length","method","fetch","concat","then","response","ok","Error","json","catch","error","console","updateLikeCount","_id","data","classList","toggle","openModal","modal","add","closeByEsc","closeModal","remove","removeEventListener","evt","hideInputError","formElement","inputElement","validationConfig","errorElement","id","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","cardList","editButton","addButton","addButtonAvatar","modalEditProfile","modalNewCard","modalNewAvatar","closePopup","querySelectorAll","overlayContent","formEditProfile","nameInput","jobInput","nameProfile","jobProfile","formElementCard","formElementAvatar","imgModal","ImgModalUrl","ImgModalTitle","nameInputCard","linkInputCard","linkInputAvatar","profileTitle","profileDescription","closeOverlay","target","contains","element","preventDefault","arrayInfo","newItemCard","value","body","JSON","stringify","closest","reset","err","newCard","prepend","newAvatar","linkValueAvatar","avatar","res","style","backgroundImage","status","updatedProfileData","about","forEach","popup","button","Promise","all","reject","_ref","_ref2","userData","deleteButton","owner","log","display","append","formSelector","inputSelector","submitButtonSelector","Array","from","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","reportValidity","isValid","setEventListeners","enableValidation","clearValidation"],"sourceRoot":""}